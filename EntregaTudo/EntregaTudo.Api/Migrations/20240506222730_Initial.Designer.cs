// <auto-generated />
using System;
using EntregaTudo.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntregaTudo.Api.Migrations
{
    [DbContext(typeof(EntregaTudoDbContext))]
    [Migration("20240506222730_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Delivery.Delivery", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("DestinationDeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginDeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationDeliveryId")
                        .IsUnique();

                    b.HasIndex("OriginDeliveryId")
                        .IsUnique();

                    b.ToTable("Deliveries", (string)null);
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Delivery.ItemDelivery", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("ItemDeliveries", (string)null);
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Vehicle.Vehicle", b =>
                {
                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("LoadCapacity")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("ManufactureYear")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VehicleStatus")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Infrastructure.Address", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumberAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.User.Person", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Delivery.Delivery", b =>
                {
                    b.HasOne("EntregaTudo.Core.Domain.Infrastructure.Address", "DestinationDelivery")
                        .WithOne()
                        .HasForeignKey("EntregaTudo.Core.Domain.Business.Delivery.Delivery", "DestinationDeliveryId")
                        .IsRequired();

                    b.HasOne("EntregaTudo.Core.Domain.Infrastructure.Address", "OriginDelivery")
                        .WithOne()
                        .HasForeignKey("EntregaTudo.Core.Domain.Business.Delivery.Delivery", "OriginDeliveryId")
                        .IsRequired();

                    b.Navigation("DestinationDelivery");

                    b.Navigation("OriginDelivery");
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Delivery.ItemDelivery", b =>
                {
                    b.HasOne("EntregaTudo.Core.Domain.Business.Delivery.Delivery", null)
                        .WithMany("Items")
                        .HasForeignKey("DeliveryId")
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Vehicle.Vehicle", b =>
                {
                    b.HasOne("EntregaTudo.Core.Domain.User.Person", null)
                        .WithOne("Vehicle")
                        .HasForeignKey("EntregaTudo.Core.Domain.Business.Vehicle.Vehicle", "Id")
                        .IsRequired();

                    b.HasOne("EntregaTudo.Core.Domain.User.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.Business.Delivery.Delivery", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EntregaTudo.Core.Domain.User.Person", b =>
                {
                    b.Navigation("Vehicle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
